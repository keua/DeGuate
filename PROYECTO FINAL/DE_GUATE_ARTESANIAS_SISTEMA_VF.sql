-- MySQL Script generated by MySQL Workbench
-- 06/10/15 22:03:47
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
SET SQL_SAFE_UPDATES=0;
-- -----------------------------------------------------
-- Schema DE_GUATE_ARTESANIAS_DB
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `DE_GUATE_ARTESANIAS_DB` ;

-- -----------------------------------------------------
-- Schema DE_GUATE_ARTESANIAS_DB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `DE_GUATE_ARTESANIAS_DB` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `DE_GUATE_ARTESANIAS_DB` ;

-- -----------------------------------------------------
-- Table `DE_GUATE_ARTESANIAS_DB`.`EMPRESA`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DE_GUATE_ARTESANIAS_DB`.`EMPRESA` ;

CREATE TABLE IF NOT EXISTS `DE_GUATE_ARTESANIAS_DB`.`EMPRESA` (
  `EMPRESA` INT NOT NULL DEFAULT 1,
  `NOMBRE` VARCHAR(50) NULL,
  `SLOGAN` VARCHAR(250) NULL,
  `MISION` VARCHAR(250) NULL,
  `VISION` VARCHAR(250) NULL,
  `DESCRIPCION` VARCHAR(250) NULL,
  `TELEFONO` INT(11) NULL,
  `DIRECCION` VARCHAR(100) NULL,
  `CORREO` VARCHAR(100) NULL,
  `NOVEDADES` VARCHAR(250) NULL,
  PRIMARY KEY (`EMPRESA`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DE_GUATE_ARTESANIAS_DB`.`ADMINISTRADOR`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DE_GUATE_ARTESANIAS_DB`.`ADMINISTRADOR` ;

CREATE TABLE IF NOT EXISTS `DE_GUATE_ARTESANIAS_DB`.`ADMINISTRADOR` (
  `ADMINISTRADOR` INT NOT NULL AUTO_INCREMENT,
  `USUARIO` VARCHAR(50) NULL UNIQUE,
  `PASS` BINARY(16) NULL,
  `EMPRESA` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`ADMINISTRADOR`),
  INDEX `fk_ADMINISTRADOR_EMPRESA1_idx` (`EMPRESA` ASC),
  CONSTRAINT `fk_ADMINISTRADOR_EMPRESA1`
    FOREIGN KEY (`EMPRESA`)
    REFERENCES `DE_GUATE_ARTESANIAS_DB`.`EMPRESA` (`EMPRESA`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DE_GUATE_ARTESANIAS_DB`.`IMAGEN`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DE_GUATE_ARTESANIAS_DB`.`IMAGEN` ;

CREATE TABLE IF NOT EXISTS `DE_GUATE_ARTESANIAS_DB`.`IMAGEN` (
  `IMAGEN` INT NOT NULL AUTO_INCREMENT,
  `DESCRIPCION` VARCHAR(50) NULL,
  `URL` VARCHAR(50) NULL,
  PRIMARY KEY (`IMAGEN`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DE_GUATE_ARTESANIAS_DB`.`RED_SOCIAL`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DE_GUATE_ARTESANIAS_DB`.`RED_SOCIAL` ;

CREATE TABLE IF NOT EXISTS `DE_GUATE_ARTESANIAS_DB`.`RED_SOCIAL` (
  `RED_SOCIAL` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(50) NULL,
  `URL` VARCHAR(50) NULL,
  `EMPRESA` INT NOT NULL DEFAULT 1,
  `IMAGEN` INT NOT NULL,
  PRIMARY KEY (`RED_SOCIAL`, `IMAGEN`),
  INDEX `fk_RED_SOCIAL_EMPRESA1_idx` (`EMPRESA` ASC),
  INDEX `fk_RED_SOCIAL_IMAGEN1_idx` (`IMAGEN` ASC),
  CONSTRAINT `fk_RED_SOCIAL_EMPRESA1`
    FOREIGN KEY (`EMPRESA`)
    REFERENCES `DE_GUATE_ARTESANIAS_DB`.`EMPRESA` (`EMPRESA`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_RED_SOCIAL_IMAGEN1`
    FOREIGN KEY (`IMAGEN`)
    REFERENCES `DE_GUATE_ARTESANIAS_DB`.`IMAGEN` (`IMAGEN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DE_GUATE_ARTESANIAS_DB`.`TIENDA`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DE_GUATE_ARTESANIAS_DB`.`TIENDA` ;

CREATE TABLE IF NOT EXISTS `DE_GUATE_ARTESANIAS_DB`.`TIENDA` (
  `TIENDA` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(50) NULL,
  `DIRECCION` VARCHAR(100) NULL,
  `TELEFONO` INT(11) NULL,
  `EMPRESA` INT NOT NULL DEFAULT 1,
  `IMAGEN` INT NOT NULL,
  `ENLACE` VARCHAR(50) NULL,
  PRIMARY KEY (`TIENDA`, `IMAGEN`),
  INDEX `fk_TIENDA_EMPRESA1_idx` (`EMPRESA` ASC),
  INDEX `fk_TIENDA_IMAGEN1_idx` (`IMAGEN` ASC),
  CONSTRAINT `fk_TIENDA_EMPRESA1`
    FOREIGN KEY (`EMPRESA`)
    REFERENCES `DE_GUATE_ARTESANIAS_DB`.`EMPRESA` (`EMPRESA`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TIENDA_IMAGEN1`
    FOREIGN KEY (`IMAGEN`)
    REFERENCES `DE_GUATE_ARTESANIAS_DB`.`IMAGEN` (`IMAGEN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DE_GUATE_ARTESANIAS_DB`.`MARCA`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DE_GUATE_ARTESANIAS_DB`.`MARCA` ;

CREATE TABLE IF NOT EXISTS `DE_GUATE_ARTESANIAS_DB`.`MARCA` (
  `MARCA` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(50) NULL,
  `EMPRESA` INT NOT NULL DEFAULT 1,
  `IMAGEN` INT NOT NULL,
  `DESCRIPCION` VARCHAR(250) NULL,
  PRIMARY KEY (`MARCA`, `IMAGEN`),
  INDEX `fk_MARCA_EMPRESA1_idx` (`EMPRESA` ASC),
  INDEX `fk_MARCA_IMAGEN1_idx` (`IMAGEN` ASC),
  CONSTRAINT `fk_MARCA_EMPRESA1`
    FOREIGN KEY (`EMPRESA`)
    REFERENCES `DE_GUATE_ARTESANIAS_DB`.`EMPRESA` (`EMPRESA`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_MARCA_IMAGEN1`
    FOREIGN KEY (`IMAGEN`)
    REFERENCES `DE_GUATE_ARTESANIAS_DB`.`IMAGEN` (`IMAGEN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DE_GUATE_ARTESANIAS_DB`.`PRODUCTO`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DE_GUATE_ARTESANIAS_DB`.`PRODUCTO` ;

CREATE TABLE IF NOT EXISTS `DE_GUATE_ARTESANIAS_DB`.`PRODUCTO` (
  `PRODUCTO` INT NOT NULL AUTO_INCREMENT,
  `TITULO` VARCHAR(50) NULL,
  `DESCRIPCION` VARCHAR(250) NULL,
  `PRECIO` DOUBLE NULL,
  `EMPRESA` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`PRODUCTO`),
  INDEX `fk_PRODUCTO_EMPRESA1_idx` (`EMPRESA` ASC),
  CONSTRAINT `fk_PRODUCTO_EMPRESA1`
    FOREIGN KEY (`EMPRESA`)
    REFERENCES `DE_GUATE_ARTESANIAS_DB`.`EMPRESA` (`EMPRESA`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
PACK_KEYS = DEFAULT;


-- -----------------------------------------------------
-- Table `DE_GUATE_ARTESANIAS_DB`.`CATEGORIA`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DE_GUATE_ARTESANIAS_DB`.`CATEGORIA` ;

CREATE TABLE IF NOT EXISTS `DE_GUATE_ARTESANIAS_DB`.`CATEGORIA` (
  `CATEGORIA` INT NOT NULL AUTO_INCREMENT,
  `NOMBRE` VARCHAR(50) NULL,
  `IMAGEN` INT NOT NULL,
  PRIMARY KEY (`CATEGORIA`, `IMAGEN`),
  INDEX `fk_CATEGORIA_IMAGEN1_idx` (`IMAGEN` ASC),
  CONSTRAINT `fk_CATEGORIA_IMAGEN1`
    FOREIGN KEY (`IMAGEN`)
    REFERENCES `DE_GUATE_ARTESANIAS_DB`.`IMAGEN` (`IMAGEN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DE_GUATE_ARTESANIAS_DB`.`PROD_CAT`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DE_GUATE_ARTESANIAS_DB`.`PROD_CAT` ;

CREATE TABLE IF NOT EXISTS `DE_GUATE_ARTESANIAS_DB`.`PROD_CAT` (
  `PRODUCTO` INT NOT NULL,
  `CATEGORIA` INT NOT NULL,
  PRIMARY KEY (`PRODUCTO`, `CATEGORIA`),
  INDEX `fk_PROD_CAT_CATEGORIA1_idx` (`CATEGORIA` ASC),
  CONSTRAINT `fk_PROD_CAT_PRODUCTO`
    FOREIGN KEY (`PRODUCTO`)
    REFERENCES `DE_GUATE_ARTESANIAS_DB`.`PRODUCTO` (`PRODUCTO`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PROD_CAT_CATEGORIA1`
    FOREIGN KEY (`CATEGORIA`)
    REFERENCES `DE_GUATE_ARTESANIAS_DB`.`CATEGORIA` (`CATEGORIA`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DE_GUATE_ARTESANIAS_DB`.`IMG_EMPRESA`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DE_GUATE_ARTESANIAS_DB`.`IMG_EMPRESA` ;

CREATE TABLE IF NOT EXISTS `DE_GUATE_ARTESANIAS_DB`.`IMG_EMPRESA` (
  `TIPO` INT NOT NULL,
  `EMPRESA` INT NOT NULL DEFAULT 1,
  `IMAGEN` INT NOT NULL,
  INDEX `fk_IMG_EMPRESA_EMPRESA1_idx` (`EMPRESA` ASC),
  INDEX `fk_IMG_EMPRESA_IMAGEN1_idx` (`IMAGEN` ASC),
  PRIMARY KEY (`TIPO`),
  CONSTRAINT `fk_IMG_EMPRESA_EMPRESA1`
    FOREIGN KEY (`EMPRESA`)
    REFERENCES `DE_GUATE_ARTESANIAS_DB`.`EMPRESA` (`EMPRESA`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IMG_EMPRESA_IMAGEN1`
    FOREIGN KEY (`IMAGEN`)
    REFERENCES `DE_GUATE_ARTESANIAS_DB`.`IMAGEN` (`IMAGEN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DE_GUATE_ARTESANIAS_DB`.`IMG_PROD`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DE_GUATE_ARTESANIAS_DB`.`IMG_PROD` ;

CREATE TABLE IF NOT EXISTS `DE_GUATE_ARTESANIAS_DB`.`IMG_PROD` (
  `PRODUCTO` INT NOT NULL,
  `IMAGEN` INT NOT NULL,
  PRIMARY KEY (`PRODUCTO`, `IMAGEN`),
  INDEX `fk_IMG_PROD_IMAGEN1_idx` (`IMAGEN` ASC),
  CONSTRAINT `fk_IMG_PROD_PRODUCTO1`
    FOREIGN KEY (`PRODUCTO`)
    REFERENCES `DE_GUATE_ARTESANIAS_DB`.`PRODUCTO` (`PRODUCTO`)
    ON DELETE CASCADE
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_IMG_PROD_IMAGEN1`
    FOREIGN KEY (`IMAGEN`)
    REFERENCES `DE_GUATE_ARTESANIAS_DB`.`IMAGEN` (`IMAGEN`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA CREAR LA EMPRESA
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CREAR_EMPRESA;
DELIMITER $
CREATE PROCEDURE CREAR_EMPRESA(IN NOM VARCHAR(50),IN SLO VARCHAR(250)
								,IN MIS VARCHAR(250),IN VIS VARCHAR(250),IN DES VARCHAR(250)
                                ,IN TEL INT(11),IN DIR VARCHAR(100),IN COR VARCHAR(100)
                                ,IN NOV VARCHAR(250)
							  )
BEGIN
	INSERT INTO EMPRESA(NOMBRE,SLOGAN,MISION,VISION,DESCRIPCION,TELEFONO
						,DIRECCION,CORREO,NOVEDADES
					   )
	VALUES(NOM,SLO,MIS,VIS,DES,TEL,DIR,COR,NOV);
END $

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA ACTUALIZAR NOMBRE DE LA EMPRESA
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CAMBIAR_NOMBRE;
DELIMITER $
CREATE PROCEDURE CAMBIAR_NOMBRE(IN NOM VARCHAR(50))
BEGIN
	UPDATE EMPRESA SET NOMBRE = NOM WHERE EMPRESA = 1;
END $

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA ACTUALIZAR SLOGAN DE LA EMPRESA
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CAMBIAR_SLOGAN;
DELIMITER $
CREATE PROCEDURE CAMBIAR_SLOGAN(IN SLO VARCHAR(250))
BEGIN
	UPDATE EMPRESA SET SLOGAN = SLO WHERE EMPRESA = 1;
END $

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA ACTUALIZAR MISION DE LA EMPRESA
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CAMBIAR_MISION;
DELIMITER $
CREATE PROCEDURE CAMBIAR_MISION(IN MIS VARCHAR(250))
BEGIN
	UPDATE EMPRESA SET MISION = MIS WHERE EMPRESA = 1 ;
END $

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA ACTUALIZAR VISION DE LA EMPRESA
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CAMBIAR_VISION;
DELIMITER $
CREATE PROCEDURE CAMBIAR_VISION(IN VIS VARCHAR(250))
BEGIN
	UPDATE EMPRESA SET VISION = VIS WHERE EMPRESA = 1;
END $

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA ACTUALIZAR DESCRIPCION DE LA EMPRESA
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CAMBIAR_DESCRIPCION;
DELIMITER $
CREATE PROCEDURE CAMBIAR_DESCRIPCION(IN DES VARCHAR(250))
BEGIN
	UPDATE EMPRESA SET DESCRIPCION = DES WHERE EMPRESA = 1;
END $

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA ACTUALIZAR TELEFONO DE LA EMPRESA
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CAMBIAR_TELEFONO;
DELIMITER $
CREATE PROCEDURE CAMBIAR_TELEFONO(IN TEL INT(11))
BEGIN
	UPDATE EMPRESA SET TELEFONO = TEL WHERE EMPRESA = 1;
END $

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA ACTUALIZAR DIRECCION DE LA EMPRESA
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CAMBIAR_DIRECCION;
DELIMITER $
CREATE PROCEDURE CAMBIAR_DIRECCION(IN DIR VARCHAR(100))
BEGIN
	UPDATE EMPRESA SET DIRECCION = DIR WHERE EMPRESA = 1;
END $

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA ACTUALIZAR CORREO DE LA EMPRESA
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CAMBIAR_CORREO;
DELIMITER $
CREATE PROCEDURE CAMBIAR_CORREO(IN COR VARCHAR(100))
BEGIN
	UPDATE EMPRESA SET CORREO = COR  WHERE EMPRESA = 1;
END $

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA ACTUALIZAR NOVEDADES DE LA EMPRESA
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CAMBIAR_NOV;
DELIMITER $
CREATE PROCEDURE CAMBIAR_NOV(IN NOV VARCHAR(100))
BEGIN
	UPDATE EMPRESA SET NOVEDADES = NOV WHERE EMPRESA = 1;
END $

-- -------------------------------------------------------
-- PROCEDIMIENTO PARA CREAR IMAGENES A LA TABLA IMAGEN
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CREAR_IMG;
DELIMITER $
CREATE PROCEDURE CREAR_IMG(IN DES VARCHAR(50),IN UR VARCHAR(50))
BEGIN
	INSERT INTO IMAGEN(DESCRIPCION,URL)
    VALUES (DES,UR);
END $

-- -------------------------------------------------------
-- PROCEDIMIENTO PARA ASIGNAR IMAGENES A LA EMPRESA
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.ASIGNAR_IMG_EMPRESA;
DELIMITER $
CREATE PROCEDURE ASIGNAR_IMG_EMPRESA(IN TIP VARCHAR(50),IN IM INT)
BEGIN
DECLARE IMG INT DEFAULT IM;
DECLARE TIPN INT DEFAULT -1;
CASE TIP
	WHEN 'LOGO' 
    THEN  
		SET TIPN = GET_TIPON(TIP);
		IF (EXISTS(SELECT TIPO FROM IMG_EMPRESA WHERE TIPO = TIPN))
		THEN	
			UPDATE IMG_EMPRESA SET IMAGEN = IMG WHERE TIPO = TIPN;
		ELSE
			INSERT INTO IMG_EMPRESA (TIPO,IMAGEN) VALUES (TIPN,IMG);
		END IF;
	WHEN 'PORTADA1'
    THEN
		SET TIPN = GET_TIPON(TIP);
		IF (EXISTS(SELECT TIPO FROM IMG_EMPRESA WHERE TIPO = TIPN))
		THEN	
			UPDATE IMG_EMPRESA SET IMAGEN = IMG WHERE TIPO = TIPN;
		ELSE
			INSERT INTO IMG_EMPRESA (TIPO,IMAGEN) VALUES (TIPN,IMG);
		END IF;    
    WHEN 'PORTADA2'
    THEN  
		SET TIPN = GET_TIPON(TIP);
		IF (EXISTS(SELECT TIPO FROM IMG_EMPRESA WHERE TIPO = TIPN))
		THEN	
			UPDATE IMG_EMPRESA SET IMAGEN = IMG WHERE TIPO = TIPN;
		ELSE
			INSERT INTO IMG_EMPRESA (TIPO,IMAGEN) VALUES (TIPN,IMG);
		END IF;    
    WHEN 'PORTADA3'
    THEN  
		SET TIPN = GET_TIPON(TIP);
		IF (EXISTS(SELECT TIPO FROM IMG_EMPRESA WHERE TIPO = TIPN))
		THEN	
			UPDATE IMG_EMPRESA SET IMAGEN = IMG WHERE TIPO = TIPN;
		ELSE
			INSERT INTO IMG_EMPRESA (TIPO,IMAGEN) VALUES (TIPN,IMG);
		END IF;
    WHEN 'NOVEDADES'
    THEN  
		SET TIPN = GET_TIPON(TIP);
		IF (EXISTS(SELECT TIPO FROM IMG_EMPRESA WHERE TIPO = TIPN))
		THEN	
			UPDATE IMG_EMPRESA SET IMAGEN = IMG WHERE TIPO = TIPN;
		ELSE
			INSERT INTO IMG_EMPRESA (TIPO,IMAGEN) VALUES (TIPN,IMG);
		END IF;
ELSE
	BEGIN
		SELECT 'NO EXISTE';
	END;
END CASE;
END $

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA CREAR  REDES_SOCIALES
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CREAR_RS;
DELIMITER $
CREATE PROCEDURE  CREAR_RS(IN NOM VARCHAR(50),IN UR VARCHAR(50),IN IMG INT)
BEGIN
	INSERT INTO RED_SOCIAL (NOMBRE,URL,IMAGEN) 
    VALUES (NOM,UR,IMG);
END $

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA ELIMINAR  REDES_SOCIALES
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.ELIMINAR_RS;
DELIMITER $
CREATE PROCEDURE  ELIMINAR_RS(IN COD INT)
BEGIN
	DELETE FROM RED_SOCIAL WHERE RED_SOCIAL = COD;
END $

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA MOSTRAR  REDES_SOCIALES
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.GET_RS;
DELIMITER $
CREATE PROCEDURE  GET_RS()
BEGIN
	SELECT RED_SOCIAL,NOMBRE,URL FROM RED_SOCIAL;
END $

-- -------------------------------------------------------
-- PROCEDIMIENTO ACTUALIZAR CATEGORIAS EN LA TABLA CATEGORIA
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.ACTUALIZAR_CAT;
DELIMITER $
CREATE PROCEDURE ACTUALIZAR_CAT(IN NOM VARCHAR(50),IN IMG INT,IN CAT INT)
BEGIN
	UPDATE CATEGORIA SET NOMBRE=NOM,IMAGEN =IMG WHERE CATEGORIA = CAT;
END
$

-- -------------------------------------------------------
-- PROCEDIMIENTO CREAR CATEGORIAS EN LA TABLA CATEGORIA
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CREAR_CAT;
DELIMITER $
CREATE PROCEDURE CREAR_CAT(IN NOM VARCHAR(50),IN IMG INT)
BEGIN
	INSERT INTO CATEGORIA(NOMBRE,IMAGEN)
    VALUES (NOM,IMG);
END
$

-- -------------------------------------------------------
-- PROCEDIMIENTO CREAR CATEGORIAS EN LA TABLA CATEGORIA
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.GET_CAT;
DELIMITER $
CREATE PROCEDURE GET_CAT()
BEGIN
	SELECT C.CATEGORIA,C.NOMBRE,I.URL 
	FROM CATEGORIA C,IMAGEN I
	WHERE C.IMAGEN = I.IMAGEN
    ORDER BY C.NOMBRE ASC;
END
$

-- -------------------------------------------------------
-- PROCEDIMIENTO CREAR CATEGORIAS EN LA TABLA CATEGORIA
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.GET_CAT_ID;
DELIMITER $
CREATE PROCEDURE GET_CAT_ID(IN ID INT)
BEGIN
	SELECT C.CATEGORIA,C.NOMBRE,I.URL 
	FROM CATEGORIA C,IMAGEN I
	WHERE C.IMAGEN = I.IMAGEN
    AND C.CATEGORIA = ID;
END
$
-- -------------------------------------------------------
-- PROCEDIMIENTO CREAR PRODUCTOS EN LA TABLA PRODUCTO
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CREAR_PRODUCTO;
DELIMITER $
CREATE PROCEDURE CREAR_PRODUCTO(IN TIT VARCHAR(50),IN DES VARCHAR(250),IN PRE DOUBLE(5,2))
BEGIN
	INSERT INTO PRODUCTO(TITULO,DESCRIPCION,PRECIO)
    VALUES (TIT,DES,PRE);
END
$

-- -------------------------------------------------------
-- PROCEDIMIENTO ASIGNAR IMAGEN  A PRODUCTOS
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.ASIGNAR_IMG_PROD;
DELIMITER $
CREATE PROCEDURE ASIGNAR_IMG_PROD(IN IMG INT,IN PROD INT)
BEGIN
DECLARE ID INT DEFAULT PROD;
IF(ID IS NULL)
THEN
	 SET ID = (SELECT PRODUCTO FROM PRODUCTO ORDER BY PRODUCTO DESC LIMIT 1);
END IF;
	INSERT INTO IMG_PROD(PRODUCTO,IMAGEN)
    VALUES (ID,IMG);
END
$

-- -------------------------------------------------------
-- PROCEDIMIENTO ELIMINAR IMAGEN  A PRODUCTOS
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.ELIMINAR_IMG_PROD;
DELIMITER $
CREATE PROCEDURE ELIMINAR_IMG_PROD(IN PRO INT)
BEGIN
	DELETE FROM IMG_PROD WHERE PRODUCTO=PRO;
END
$
-- -------------------------------------------------------
-- PROCEDIMIENTO ASIGNAR CATEGORIA  A PRODUCTOS
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.ASIGNAR_CAT_PROD;
DELIMITER $
CREATE PROCEDURE ASIGNAR_CAT_PROD(IN CAT INT, IN PROD INT)
BEGIN
DECLARE ID INT DEFAULT PROD;
IF(ID IS NULL)
THEN
	 SET ID = (SELECT PRODUCTO FROM PRODUCTO ORDER BY PRODUCTO DESC LIMIT 1);
END IF;
	INSERT INTO PROD_CAT(PRODUCTO,CATEGORIA)
    VALUES (ID,CAT);
END
$

-- -------------------------------------------------------
-- PROCEDIMIENTO ELIMINAR CATEGORIA  A PRODUCTOS
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.ELIMINAR_CAT_PROD;
DELIMITER $
CREATE PROCEDURE ELIMINAR_CAT_PROD(IN PRO INT)
BEGIN
	DELETE FROM PROD_CAT WHERE PRODUCTO=PRO;
END
$

-- -------------------------------------------------------
-- PROCEDIMIENTO ACTUALIZAR PRODUCTOS EN LA TABLA PRODUCTO
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.ACTUALIZAR_PRODUCTO;
DELIMITER $
CREATE PROCEDURE ACTUALIZAR_PRODUCTO(IN TIT VARCHAR(50),IN DES VARCHAR(250),IN PRE DOUBLE(5,2),IN PROD INT)
BEGIN
	UPDATE PRODUCTO SET TITULO = TIT,DESCRIPCION = DES, PRECIO = PRE WHERE PRODUCTO= PROD;
END
$

-- -------------------------------------------------------
-- PROCEDIMIENTO ELIMINAR PRODUCTOS EN LA TABLA PRODUCTO
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.ELIMINAR_PRODUCTO;
DELIMITER $
CREATE PROCEDURE ELIMINAR_PRODUCTO(IN PROD INT)
BEGIN
	DELETE FROM PRODUCTO WHERE PRODUCTO = PROD;
END
$

-- -------------------------------------------------------
-- PROCEDIMIENTO OBTENER PRODUCTOS EN LA TABLA PRODUCTO
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.GET_PRODUCTO;
DELIMITER $
CREATE PROCEDURE GET_PRODUCTO()
BEGIN
	SELECT P.PRODUCTO, P.TITULO,P.DESCRIPCION,P.PRECIO,C.NOMBRE AS CATEGORIA,I.URL AS IMAGEN
	FROM PRODUCTO P,CATEGORIA C,IMAGEN I,PROD_CAT PC, IMG_PROD IP
	WHERE P.PRODUCTO = PC.PRODUCTO
	AND C.CATEGORIA = PC.CATEGORIA
	AND P.PRODUCTO = IP.PRODUCTO
	AND I.IMAGEN = IP.IMAGEN
	ORDER  BY P.PRODUCTO ASC;
END
$

-- -------------------------------------------------------
-- PROCEDIMIENTO OBTENER PRODUCTOS EN LA TABLA PRODUCTO
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.GET_PRODUCTO_CAT;
DELIMITER $
CREATE PROCEDURE GET_PRODUCTO_CAT(IN CAT INT)
BEGIN
	SELECT P.PRODUCTO, P.TITULO,P.DESCRIPCION,P.PRECIO,C.NOMBRE AS CATEGORIA,I.URL AS IMAGEN
	FROM PRODUCTO P,CATEGORIA C,IMAGEN I,PROD_CAT PC, IMG_PROD IP
	WHERE P.PRODUCTO = PC.PRODUCTO
	AND C.CATEGORIA = PC.CATEGORIA
	AND P.PRODUCTO = IP.PRODUCTO
	AND I.IMAGEN = IP.IMAGEN
    AND C.CATEGORIA = CAT
	ORDER  BY P.PRODUCTO ASC;
END
$

-- -------------------------------------------------------
-- PROCEDIMIENTO CREAR TIENDAS
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CREAR_TIENDA;
DELIMITER $
CREATE PROCEDURE CREAR_TIENDA(IN NOM VARCHAR(50),IN DIR VARCHAR(100),IN TEL INT(11),IN ENL VARCHAR(50),IN IMG INT)
BEGIN
	INSERT INTO TIENDA (NOMBRE,DIRECCION,TELEFONO,ENLACE,IMAGEN)
    VALUES (NOM,DIR,TEL,ENL,IMG);
END
$

-- -------------------------------------------------------
-- PROCEDIMIENTO ELIMINAR TIENDAS
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.ELIMINAR_TIENDA;
DELIMITER $
CREATE PROCEDURE ELIMINAR_TIENDA(IN TIE INT)
BEGIN
	DELETE FROM TIENDA WHERE TIENDA = TIE;
END
$

-- -------------------------------------------------------
-- PROCEDIMIENTO OBTENER TIENDAS
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.GET_TIENDA;
DELIMITER $
CREATE PROCEDURE GET_TIENDA()
BEGIN
	SELECT T.TIENDA,T.NOMBRE,T.DIRECCION,T.TELEFONO,T.ENLACE,I.URL
	FROM TIENDA T,IMAGEN I
	WHERE T.IMAGEN = I.IMAGEN
	ORDER BY T.TIENDA ASC; 
END
$

-- -------------------------------------------------------
-- PROCEDIMIENTO CREAR MARCA
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CREAR_MARCA;
DELIMITER $
CREATE PROCEDURE CREAR_MARCA(IN NOM VARCHAR(50),IN IMG INT,IN DES VARCHAR(250))
BEGIN
	INSERT INTO MARCA (NOMBRE,IMAGEN,DESCRIPCION)
    VALUES (NOM,IMG,DES);
END
$

-- -------------------------------------------------------
-- PROCEDIMIENTO ELIMINAR MARCA
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.ELIMINAR_MARCA;
DELIMITER $
CREATE PROCEDURE ELIMINAR_MARCA(IN MAR INT)
BEGIN
	DELETE FROM MARCA WHERE MARCA = MAR;
END
$

-- -------------------------------------------------------
-- PROCEDIMIENTO OBTENER MARCA
-- -------------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.GET_MARCA;
DELIMITER $
CREATE PROCEDURE GET_MARCA()
BEGIN
	SELECT M.MARCA,M.NOMBRE,I.URL AS IMAGEN,M.DESCRIPCION
	FROM MARCA M,IMAGEN I
	WHERE M.IMAGEN = I.IMAGEN 
	GROUP BY M.NOMBRE ASC;

END
$

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA CREAR USUARIOS ADMINISTRADORES
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.INSERTAR_ADMIN;
DELIMITER $
CREATE PROCEDURE  INSERTAR_ADMIN(IN USER VARCHAR(50),IN PASSW VARCHAR(50))
BEGIN
	INSERT INTO ADMINISTRADOR (USUARIO,PASS) 
    VALUES (USER,unhex(md5(PASSW)));
END $

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA ELIMINAR USUARIOS ADMINISTRADORES
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.ELIMINAR_ADMIN;
DELIMITER $
CREATE PROCEDURE  ELIMINAR_ADMIN(IN ID INT)
BEGIN
	DELETE FROM ADMINISTRADOR WHERE ADMINISTRADOR = ID;
END $

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA MOSTRAR USUARIOS ADMINISTRADORES
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.MOSTRAR_ADMIN;
DELIMITER $
CREATE PROCEDURE  MOSTRAR_ADMIN()
BEGIN
	SELECT ADMINISTRADOR,USUARIO FROM ADMINISTRADOR;
END $

-- -----------------------------------------------------
-- PROCEDIMIENTO PARA AUTENTICAR USUARIOS ADMINISTRADORES
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.AUTENTICAR_ADMIN;
DELIMITER $
CREATE PROCEDURE  AUTENTICAR_ADMIN(IN USER VARCHAR(50),IN PASSW VARCHAR(50))
BEGIN

	SELECT ADMINISTRADOR,USUARIO FROM ADMINISTRADOR 
		WHERE USUARIO=USER AND PASS = unhex(md5(PASSW));
    
END $

-- -----------------------------------------------------
-- FUNCION PARA DEVOLVER EL TIPO DE IMAGEN DE LA EMPRESA
-- -----------------------------------------------------
DROP FUNCTION IF EXISTS  DE_GUATE_ARTESANIAS_DB.GET_TIPO;
DELIMITER $
CREATE FUNCTION GET_TIPO(TIPO INT)
RETURNS VARCHAR(50)
BEGIN
	CASE TIPO
		  WHEN 1 THEN RETURN 'LOGO';
		  WHEN 2 THEN RETURN 'PORTADA1';
          WHEN 3 THEN RETURN 'PORTADA2';
          WHEN 4 THEN RETURN 'PORTADA3';
          WHEN 5 THEN RETURN 'NOVEDADES';
		  ELSE
			BEGIN
				RETURN 'NO EXISTE';
			END;
	END CASE;
END
$

-- -----------------------------------------------------
-- FUNCION PARA DEVOLVER EL TIPO NUMERICO DE IMAGEN DE LA EMPRESA
-- -----------------------------------------------------
DROP FUNCTION IF EXISTS  DE_GUATE_ARTESANIAS_DB.GET_TIPON;
DELIMITER $
CREATE FUNCTION GET_TIPON(TIPO VARCHAR(50))
RETURNS INT
BEGIN
	CASE TIPO
		  WHEN 'LOGO' THEN RETURN 1;
		  WHEN 'PORTADA1' THEN RETURN 2;
          WHEN 'PORTADA2' THEN RETURN 3;
          WHEN 'PORTADA3' THEN RETURN 4;
          WHEN 'NOVEDADES' THEN RETURN 5;
		  ELSE
			BEGIN
				RETURN -1;
			END;
	END CASE;
END
$
-- -----------------------------------------------------
-- ELIMINAR IMAGENES DE LA TABLA IMAGENS
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.ELIMINAR_IMG;
DELIMITER $
CREATE PROCEDURE ELIMINAR_IMG(IN IMG INT)
BEGIN
	UPDATE IMAGEN SET URL='ELIMINAR' WHERE IMAGEN = IMG;
	DELETE FROM IMAGEN WHERE IMAGEN = IMG;
END
$

-- -----------------------------------------------------
-- ELIMINAR CATEGORIAS DE LA TABLA CATEGORIA
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.ELIMINAR_CAT;
DELIMITER $
CREATE PROCEDURE ELIMINAR_CAT(IN CAT INT)
BEGIN
	UPDATE CATEGORIA SET NOMBRE='ELIMINAR' WHERE CATEGORIA = CAT;
	DELETE FROM CATEGORIA WHERE CATEGORIA = CAT;
END
$
-- -----------------------------------------------------
-- TRIGGER PARA ELIMINAR IMAGENES
-- -----------------------------------------------------
DELIMITER $

CREATE TRIGGER ELIMINAR_IMAGEN
AFTER UPDATE
   ON IMAGEN FOR EACH ROW
   
BEGIN

	UPDATE IMG_PROD IP,IMAGEN I
    SET IP.IMAGEN = -1
    WHERE IP.IMAGEN = I.IMAGEN 
    AND I.URL = 'ELIMINAR';
    
    UPDATE RED_SOCIAL RS,IMAGEN I
    SET RS.IMAGEN = -1
    WHERE RS.IMAGEN = I.IMAGEN 
    AND I.URL = 'ELIMINAR';
    
    UPDATE CATEGORIA C,IMAGEN I
    SET C.IMAGEN = -1
    WHERE C.IMAGEN = I.IMAGEN 
    AND I.URL = 'ELIMINAR';
    
    UPDATE IMG_EMPRESA IE,IMAGEN I
    SET IE.IMAGEN = -1
    WHERE IE.IMAGEN = I.IMAGEN 
    AND I.URL = 'ELIMINAR';
    
    UPDATE MARCA M,IMAGEN I
    SET M.IMAGEN = -1
    WHERE M.IMAGEN = I.IMAGEN 
    AND I.URL = 'ELIMINAR';
    
    UPDATE TIENDA T,IMAGEN I
    SET T.IMAGEN = -1
    WHERE T.IMAGEN = I.IMAGEN 
    AND I.URL = 'ELIMINAR';
    
   
END; $

-- -----------------------------------------------------
-- TRIGGER PARA ELIMINAR IMAGENES
-- -----------------------------------------------------
DELIMITER $

CREATE TRIGGER ELIMINAR_CAT
AFTER UPDATE
   ON CATEGORIA FOR EACH ROW
   
BEGIN
   
    UPDATE PROD_CAT PC,CATEGORIA C
    SET PC.CATEGORIA = -1
    WHERE PC.CATEGORIA = C.CATEGORIA 
    AND C.NOMBRE = 'ELIMINAR';
   
END; $

-- -----------------------------------------------------
-- INSERTAR IMAGENES POR DEFECTO
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.IMG_DEFECTO;
DELIMITER $
CREATE PROCEDURE IMG_DEFECTO()
BEGIN
	INSERT INTO IMAGEN (IMAGEN,DESCRIPCION,URL)
    VALUES (-1,'DEFECTO','./IMAGES/DEFECTO.jpg');
END
$

-- -----------------------------------------------------
-- INSERTAR CATEGORIA POR DEFECTO
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.CAT_DEFECTO;
DELIMITER $
CREATE PROCEDURE CAT_DEFECTO()
BEGIN
	INSERT INTO CATEGORIA (CATEGORIA,NOMBRE,IMAGEN)
    VALUES (-1,'DEFECTO',-1);
END
$

-- -----------------------------------------------------
-- Informacion de empresa
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.GET_INFO_EMPRESA;
DELIMITER $
CREATE PROCEDURE GET_INFO_EMPRESA()
BEGIN
	SELECT E.NOMBRE,E.SLOGAN,E.MISION,E.VISION,E.DESCRIPCION,E.TELEFONO,E.DIRECCION,E.CORREO,E.NOVEDADES
	FROM EMPRESA E
    WHERE EMPRESA = 1;
END
$

-- -----------------------------------------------------
-- REDES EMPRESA
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.GET_REDES_EMPRESA;
DELIMITER $
CREATE PROCEDURE GET_REDES_EMPRESA()
BEGIN
	SELECT  RS.NOMBRE AS NOMBRE,RS.URL AS LINK,I.URL AS IMAGEN, RS.RED_SOCIAL AS ID
    FROM RED_SOCIAL RS,IMAGEN I,EMPRESA E
    WHERE RS.EMPRESA = E.EMPRESA
    AND I.IMAGEN = RS.IMAGEN
    AND E.EMPRESA = 1;
END
$

-- -----------------------------------------------------
-- IMAGENES EMPRESA
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.GET_IMG_EMPRESA;
DELIMITER $
CREATE PROCEDURE GET_IMG_EMPRESA()
BEGIN
	SELECT (GET_TIPO(IE.TIPO)) AS TIPO,I.URL 
	FROM IMG_EMPRESA IE,EMPRESA E,IMAGEN I
	WHERE IE.EMPRESA = E.EMPRESA
	AND IE.IMAGEN = I.IMAGEN
    AND E.EMPRESA = 1;
END
$

-- -----------------------------------------------------
-- IMAGENES 
-- -----------------------------------------------------
DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.GET_IMG;
DELIMITER $
CREATE PROCEDURE GET_IMG()
BEGIN
	SELECT * FROM IMAGEN;
END
$

DROP PROCEDURE IF EXISTS DE_GUATE_ARTESANIAS_DB.DEFECTO;
DELIMITER $
CREATE PROCEDURE DEFECTO()
BEGIN
	CALL CREAR_EMPRESA('NOMBRE','SOLGAN','MISION','VISION','DESCRIPCION',000000000
						,'DIRECCION','CORREO@CORREO.COM','NOVEDADES');
	CALL IMG_DEFECTO();
	CALL CAT_DEFECTO();
    CALL INSERTAR_ADMIN('admin','admin');
END
$

CALL DEFECTO();